import { Request, Response } from "express";
import multer from "multer";
import path from "path";
import fs from "fs";
import File from "../models/File";

interface AuthRequest extends Request {
    user?: { id: number; email: string };
}

// multer –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤
const storage = multer.diskStorage({
    destination: (req, file, cb) => {
        const uploadDir = "uploads/";
        if (!fs.existsSync(uploadDir)) {
            fs.mkdirSync(uploadDir);
        }
        cb(null, uploadDir);
    },
    filename: (req, file, cb) => {
        cb(null, `${Date.now()}-${file.originalname}`);
    },
});
const fileFilter = (req: Request, file: Express.Multer.File, cb: multer.FileFilterCallback) => {
    const allowedTypes = ["image/jpeg", "image/png", "application/pdf", "application/vnd.openxmlformats-officedocument.wordprocessingml.document"];
    if (allowedTypes.includes(file.mimetype)) {
        cb(null, true);
    } else {
        cb(new Error("–ù–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–π —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞. –†–∞–∑—Ä–µ—à–µ–Ω—ã: JPEG, PNG, PDF, DOCX"));
    }
};


export const upload = multer({ storage, fileFilter });

export const uploadFile = async (req: AuthRequest, res: Response): Promise<void> => {
    console.log("üîç req.file:", req.file);

    try {
        if (!req.user) {
            res.status(401).json({ message: "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω" });
            return;
        }

        if (!req.file) {
            res.status(400).json({ message: "–§–∞–π–ª –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –∑–∞–ø—Ä–æ—Å" });
            return;
        }

        const { originalname, mimetype, size, filename } = req.file;
        const filePath = path.join("uploads", filename);

        const newFile = await File.create({
            userId: req.user.id,
            name: originalname,
            extension: path.extname(originalname),
            mimeType: mimetype,
            size,
            uploadDate: new Date(),
            filePath,
        });

        res.status(201).json({ message: "–§–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω", file: newFile });
    } catch (error) {
        res.status(500).json({ message: "–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞", error });
    }
};

export const downloadFile = async (req: AuthRequest, res: Response): Promise<void> => {
    try {
        if (!req.user) {
            res.status(401).json({ message: "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω" });
            return;
        }

        const file = await File.findByPk(req.params.id);
        if (!file) {
            res.status(404).json({ message: "–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω" });
            return;
        }

        const filePath = path.resolve(file.filePath);
        if (!fs.existsSync(filePath)) {
            res.status(404).json({ message: "–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ" });
            return;
        }

        res.download(filePath, file.name);
    } catch (error) {
        res.status(500).json({ message: "–û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞", error });
    }
};

export const listFiles = async (req: AuthRequest, res: Response): Promise<void> => {
    try {
        if (!req.user) {
            res.status(401).json({ message: "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω" });
            return;
        }

        // –ü–æ–ª—É—á–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
        const page = Number(req.query.page) || 1; // –ù–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        const pageSize = Number(req.query.list_size) || 10; // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–∞–π–ª–æ–≤
        const offset = (page - 1) * pageSize; //  —Å  –∫–∞–∫–æ–≥–æ —Ñ–∞–π–ª–∞ –Ω–∞—á–∏–Ω–∞—Ç—å

        const { count, rows: files } = await File.findAndCountAll({
            where: { userId: req.user.id },
            limit: pageSize,
            offset: offset,
            order: [["uploadDate", "DESC"]], // –ù–æ–≤—ã–µ —Ñ–∞–π–ª—ã —Å–≤–µ—Ä—Ö—É
        });

        res.json({
            message: "–°–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤",
            totalFiles: count,
            totalPages: Math.ceil(count / pageSize),
            currentPage: page,
            pageSize,
            files,
        });
    } catch (error) {
        res.status(500).json({ message: "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ —Ñ–∞–π–ª–æ–≤", error });
    }
};

export const deleteFile = async (req: AuthRequest, res: Response): Promise<void> => {
    try {
        if (!req.user) {
            res.status(401).json({ message: "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω" });
            return;
        }

        const file = await File.findByPk(req.params.id);
        if (!file) {
            res.status(404).json({ message: "–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω" });
            return;
        }

        if (file.userId !== req.user.id) {
            res.status(403).json({ message: "–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç–æ—Ç —Ñ–∞–π–ª" });
            return;
        }

        // –£–¥–∞–ª—è–µ–º –∏–∑ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
        const filePath = path.resolve(file.filePath);
        if (fs.existsSync(filePath)) {
            fs.unlinkSync(filePath);
        }

        // –∫–¥–∞–ª—è–µ–º –∑–∞–ø–∏—Å—å
        await file.destroy();

        res.json({ message: "–§–∞–π–ª —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª—ë–Ω" });
    } catch (error) {
        res.status(500).json({ message: "–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞", error });
    }
};

export const getFileInfo = async (req: AuthRequest, res: Response): Promise<void> => {
    try {
        if (!req.user) {
            res.status(401).json({ message: "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω" });
            return;
        }

        const file = await File.findByPk(req.params.id);
        if (!file) {
            res.status(404).json({ message: "–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω" });
            return;
        }

        if (file.userId !== req.user.id) {
            res.status(403).json({ message: "–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å —ç—Ç–æ—Ç —Ñ–∞–π–ª" });
            return;
        }

        res.json({
            message: "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ñ–∞–π–ª–µ",
            file: {
                id: file.id,
                name: file.name,
                extension: file.extension,
                mimeType: file.mimeType,
                size: file.size,
                uploadDate: file.uploadDate,
                filePath: file.filePath,
            },
        });
    } catch (error) {
        res.status(500).json({ message: "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ñ–∞–π–ª–µ", error });
    }
};

export const updateFile = async (req: AuthRequest, res: Response): Promise<void> => {
    try {
        if (!req.user) {
            res.status(401).json({ message: "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω" });
            return;
        }

        const file = await File.findByPk(req.params.id);
        if (!file) {
            res.status(404).json({ message: "–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω" });
            return;
        }

        if (file.userId !== req.user.id) {
            res.status(403).json({ message: "–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –æ–±–Ω–æ–≤–∏—Ç—å —ç—Ç–æ—Ç —Ñ–∞–π–ª" });
            return;
        }

        if (!req.file) {
            res.status(400).json({ message: "–ù–æ–≤—ã–π —Ñ–∞–π–ª –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω" });
            return;
        }

        // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–π —Ñ–∞–π–ª
        const oldFilePath = path.resolve(file.filePath);
        if (fs.existsSync(oldFilePath)) {
            fs.unlinkSync(oldFilePath);
        }

        // –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–æ–≤—ã–π —Ñ–∞–π–ª
        const { originalname, mimetype, size, filename } = req.file;
        const newFilePath = path.join("uploads", filename);

        file.name = originalname;
        file.extension = path.extname(originalname);
        file.mimeType = mimetype;
        file.size = size;
        file.uploadDate = new Date();
        file.filePath = newFilePath;

        await file.save();

        res.json({ message: "–§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª—ë–Ω", file });
    } catch (error) {
        res.status(500).json({ message: "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞", error });
    }
};